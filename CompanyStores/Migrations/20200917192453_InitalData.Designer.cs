// <auto-generated />
using System;
using DrugStore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CompanyStores.Migrations
{
    [DbContext(typeof(DrugDbContext))]
    [Migration("20200917192453_InitalData")]
    partial class InitalData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DrugStore.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Roll")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AdminId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("DrugStore.Entities.BuyInvoice", b =>
                {
                    b.Property<int>("BuyInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyStoreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("BuyInvoiceId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyStoreId");

                    b.HasIndex("OfficeId");

                    b.ToTable("BuyInvoices");
                });

            modelBuilder.Entity("DrugStore.Entities.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DrugStore.Entities.CompanyStore", b =>
                {
                    b.Property<int>("CompanyStoresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("StoreImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CompanyStoresId");

                    b.ToTable("CompanyStore");
                });

            modelBuilder.Entity("DrugStore.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Debts")
                        .HasColumnType("float");

                    b.Property<string>("MarketName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CompanyStoresId");

                    b.HasIndex("MarketName");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DrugStore.Entities.CustomerInvoice", b =>
                {
                    b.Property<int>("CustomerInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("CustomerInvoiceId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerInvoices");
                });

            modelBuilder.Entity("DrugStore.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceNote")
                        .HasColumnType("text");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyStoresId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("DrugStore.Entities.Office", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<string>("OfficeAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OfficePhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("OwnDebt")
                        .HasColumnName("OwnDebtForOffice")
                        .HasColumnType("float");

                    b.HasKey("OfficeId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("DrugStore.Entities.OfficeInvoice", b =>
                {
                    b.Property<int>("OfficeInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuyInvoiceId")
                        .HasColumnType("int");

                    b.Property<float>("Discount")
                        .HasColumnType("float");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<float>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("OfficeInvoiceId");

                    b.HasIndex("BuyInvoiceId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OfficeInvoices");
                });

            modelBuilder.Entity("DrugStore.Entities.OfficeReturn", b =>
                {
                    b.Property<int>("OfficeReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BuyInvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("OfficeReturnId");

                    b.HasIndex("BuyInvoiceId");

                    b.HasIndex("ProductsId");

                    b.ToTable("OfficeReturns");
                });

            modelBuilder.Entity("DrugStore.Entities.OtherPayment", b =>
                {
                    b.Property<int>("OtherPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("OtherPaymentId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("OtherPayments");
                });

            modelBuilder.Entity("DrugStore.Entities.PaymentBill", b =>
                {
                    b.Property<int>("PaymentBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("BillDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("PaymentBillId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("PaymentBills");
                });

            modelBuilder.Entity("DrugStore.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("DrugStore.Entities.Products", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BarCode")
                        .HasColumnType("text");

                    b.Property<float>("BuyPrice")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductImage")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CompanyStoresId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DrugStore.Entities.ProductsReturn", b =>
                {
                    b.Property<int>("ProductReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerInvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PReturnDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductReturnId");

                    b.HasIndex("CustomerInvoiceId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsReturns");
                });

            modelBuilder.Entity("DrugStore.Entities.TakeBill", b =>
                {
                    b.Property<int>("TakeBillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("CompanyStoresId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TBillDate")
                        .HasColumnType("datetime");

                    b.Property<string>("TBillNote")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("TakeBillId");

                    b.HasIndex("AdminId");

                    b.HasIndex("CompanyStoresId");

                    b.HasIndex("CustomerId");

                    b.ToTable("TakeBills");
                });

            modelBuilder.Entity("DrugStore.Entities.TransportInvoice", b =>
                {
                    b.Property<int>("TransportInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompanyStoreId")
                        .HasColumnType("int");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("TransportInvoiceId");

                    b.HasIndex("CompanyStoreId");

                    b.HasIndex("ProductId");

                    b.ToTable("transportInvoices");
                });

            modelBuilder.Entity("DrugStore.Entities.Admin", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Admins")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.BuyInvoice", b =>
                {
                    b.HasOne("DrugStore.Entities.Admin", "Admin")
                        .WithMany("BuyInvoices")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("BuyInvoices")
                        .HasForeignKey("CompanyStoreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("DrugStore.Entities.Categories", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Categories")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.Customer", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Customers")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.CustomerInvoice", b =>
                {
                    b.HasOne("DrugStore.Entities.Invoice", "Invoice")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("CustomerInvoices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.Invoice", b =>
                {
                    b.HasOne("DrugStore.Entities.Admin", "Admin")
                        .WithMany("Invoices")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Invoices")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.Office", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Offices")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.OfficeInvoice", b =>
                {
                    b.HasOne("DrugStore.Entities.BuyInvoice", "BuyInvoice")
                        .WithMany("OfficeInvoices")
                        .HasForeignKey("BuyInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("OfficeInvoices")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugStore.Entities.OfficeReturn", b =>
                {
                    b.HasOne("DrugStore.Entities.BuyInvoice", "BuyInvoice")
                        .WithMany("OfficeReturns")
                        .HasForeignKey("BuyInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("OfficeReturns")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.OtherPayment", b =>
                {
                    b.HasOne("DrugStore.Entities.Admin", "Admin")
                        .WithMany("OtherPayments")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany()
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugStore.Entities.PaymentBill", b =>
                {
                    b.HasOne("DrugStore.Entities.Admin", "Admin")
                        .WithMany("PaymentBills")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("PaymentBills")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.ProductCategory", b =>
                {
                    b.HasOne("DrugStore.Entities.Categories", "Categories")
                        .WithMany("ProductCategory")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("ProductCategory")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DrugStore.Entities.Products", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("Products")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.ProductsReturn", b =>
                {
                    b.HasOne("DrugStore.Entities.CustomerInvoice", "CustomerInvoice")
                        .WithMany("ProductsReturn")
                        .HasForeignKey("CustomerInvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Invoice", "Invoice")
                        .WithMany("ProductsReturn")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("ProductsReturn")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.TakeBill", b =>
                {
                    b.HasOne("DrugStore.Entities.Admin", "Admin")
                        .WithMany("TakeBills")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("TakeBills")
                        .HasForeignKey("CompanyStoresId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Customer", "Customer")
                        .WithMany("TakeBills")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("DrugStore.Entities.TransportInvoice", b =>
                {
                    b.HasOne("DrugStore.Entities.CompanyStore", "CompanyStores")
                        .WithMany("transportInvoices")
                        .HasForeignKey("CompanyStoreId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DrugStore.Entities.Products", "Products")
                        .WithMany("transportInvoices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction);
                });
#pragma warning restore 612, 618
        }
    }
}
